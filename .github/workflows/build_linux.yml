name: 'Linux'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        default: 'v0.0'
      rebuild_ffmpeg:
        description: 'Rebuild FFmpeg'
        type: boolean
        default: false
      rebuild_scons:
        description: 'Rebuild scons'
        type: boolean
        default: false
        
env:
  GODOT_VERSION: 4.4.1
  
  EXPORT_FOLDER: bin/linux_x86_64

run-name: 'Build GoZen debug for Linux version: ${{ inputs.version }} by @${{ github.actor }}'

jobs:
  build-gde-linux:
    name: 'Build GoZen'
    runs-on: ubuntu-22.04
    steps:
      - name: 'Installing dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y git bash yasm python3 python3-pip scons gcc diffutils make wget unzip tar ffmpeg binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu pkg-config libx264-dev libx265-dev

      - name: 'Checkout submodules'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 'Cache Godot'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/godot
          key: ${{ runner.os }}-ubuntu-godot-${{ env.GODOT_VERSION }}

      - name: 'Cache FFmpeg Linux'
        uses: actions/cache@v4
        with:
          path: libs/ffmpeg/bin_linux
          key: ${{ runner.os }}-ubuntu-ffmpeg

      - name: 'Cache scons Linux debug'
        uses: actions/cache@v4
        with:
          path: libs/scons_linux_debug
          key: ${{ runner.os }}-gde-gozen-debug

      - name: 'Cache scons Linux release'
        uses: actions/cache@v4
        with:
          path: libs/scons_linux_release
          key: ${{ runner.os }}-gde-gozen-release

      - name: 'Prepare Godot'
        run: |
          if [ ! -f Godot_v${{ env.GODOT_VERSION }}-stable.x86_64 ]; then
            echo "Downloading Godot editor ..."
            wget -q -O godot_linux.zip https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
            unzip -o godot_linux.zip
          else
            echo "Godot editor found in cache."
          fi

          if [ ! -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable ]; then
            echo "Downloading Godot export templates ..."
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            unzip -o godot_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            mv ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
            rm -rf ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates
          else
            echo "Godot export templates found in cache."
          fi

          sed -i 's|^config/version\s*=.*|config/version="${{ inputs.version }}"|' src/project.godot

      - name: 'Compiling GDE GoZen Debug'
        working-directory: ./libs
        run: |
          REBUILD_FFMPEG_INPUT="${{ inputs.rebuild_ffmpeg }}"
          REBUILD_SCONS_INPUT="${{ inputs.rebuild_scons }}"

          if [ ! -d ffmpeg/bin_linux ] || [ "$REBUILD_FFMPEG_INPUT" == "true" ]; then
            python3 -c 'import sys; sys.path.append("."); import build; build.compile_ffmpeg_linux("x86_64")'
          else
            echo "FFmpeg build found in cache."
          fi

          if  [ "$REBUILD_SCONS_INPUT" == "true" ]; then
            scons -c
          fi

          python3 -c 'import sys; sys.path.append("."); import build; build.copy_lib_files_linux("x86_64")'
          scons -j$(nproc) target=template_debug platform=linux arch=x86_64 cache_dir=scons_linux_debug
          scons -j$(nproc) target=template_release platform=linux arch=x86_64 cache_dir=scons_linux_release

      - name: 'Prepare folder'
        run: |
          mkdir -p ${{ env.EXPORT_FOLDER }}
          cp LICENSE ${{ env.EXPORT_FOLDER }}/LICENSE
          cp MANUAL.md ${{ env.EXPORT_FOLDER }}/MANUAL.md

      - name: 'Export for Linux'
        working-directory: ./src
        run: |
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --import godot.project --headless --export-release Linux_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.x86_64
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --headless --export-release Linux_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.x86_64

      - name: 'Copy extra libs'
        run: |
          cp libs/bin/linux_x86_64/*.so ${{ env.EXPORT_FOLDER }}

      - name: 'Upload Linux'
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Linux_x86_64_${{ inputs.version }}-DEBUG
          path: ${{ env.EXPORT_FOLDER }}
          retention-days: 2

