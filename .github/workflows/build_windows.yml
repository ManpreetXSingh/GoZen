name: 'Windows'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        default: 'v0.0'
        
env:
  GODOT_VERSION: 4.4.1
  EXPORT_FOLDER: bin/windows_x86_64

run-name: 'Build GoZen for Windows version: ${{ inputs.version }} by @${{ github.actor }}'

jobs:
  build-ffmpeg:
    name: 'Build FFmpeg'
    runs-on: ubuntu-22.04
    steps:
      - name: 'Installing dependencies'
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt update

          sudo apt-get install -y git git-svn bash yasm nasm python3 python3-pip scons gcc diffutils make wget unzip tar \
          cmake autoconf automake libtool ninja-build pkg-config \
          g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-x86-64-dev \
          win-iconv-mingw-w64-dev libz-mingw-w64-dev \
          libnuma-dev fuse libfuse2 desktop-file-utils patchelf

      - name: 'Checkout submodules'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 'Cache Godot'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/godot
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}

      - name: 'Prepare Godot'
        run: |
          if [ ! -f Godot_v${{ env.GODOT_VERSION }}-stable.x86_64 ]; then
            echo "Downloading Godot editor ..."
            wget -q -O godot_windows.zip https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_win64.exe.zip
            unzip -o godot_windows.zip
          else
            echo "Godot editor found in cache."
          fi

          if [ ! -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable ]; then
            echo "Downloading Godot export templates ..."
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            unzip -o godot_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            mv ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
            rm -rf ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates
          else
            echo "Godot export templates found in cache."
          fi

          sed -i 's|^config/version\s*=.*|config/version="${{ inputs.version }}"|' src/project.godot

      - name: 'Compiling GDE GoZen Debug'
        working-directory: ./libs
        run: |
          python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.compile_ffmpeg('windows', 'x86_64', 4)"

          scons -j$(nproc) target=template_debug platform=windows arch=x86_64
          scons -j$(nproc) target=template_release platform=windows arch=x86_64

      - name: 'Prepare folder'
        run: |
          mkdir -p ${{ env.EXPORT_FOLDER }}
          cp LICENSE ${{ env.EXPORT_FOLDER }}/LICENSE
          cp MANUAL.md ${{ env.EXPORT_FOLDER }}/MANUAL.md

      - name: 'Export for Windows'
        working-directory: ./src
        run: |
          ../Godot_v${{ env.GODOT_VERSION }}-stable_win64_console.exe --import godot.project --headless
          ../Godot_v${{ env.GODOT_VERSION }}-stable_win64_console.exe --headless --export-release Windows_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.exe

      - name: 'Copy extra libs'
        run: |
          echo "Copying libs"
          cp libs\bin\windows_x86_64\*.dll  ${{ env.EXPORT_FOLDER }}

      - name: 'Upload GDE'
        uses: actions/upload-artifact@v4
        with:
          name: gde-windows-bin
          path: libs/bin
          retention-days: 1

      - name: 'Upload Windows'
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Windows_x86_64_${{ inputs.version }}
          path: ${{ env.EXPORT_FOLDER }}
          retention-days: 2
