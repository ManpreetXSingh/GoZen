name: 'Windows'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        default: 'v0.0'
        
env:
  GODOT_VERSION: 4.4.1
  
  EXPORT_FOLDER: bin/windows_x86_64

run-name: 'Build GoZen for Windows version: ${{ inputs.version }} by @${{ github.actor }}'

jobs:
  build-gde-windows:
    name: 'Build GoZen'
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: 'Installing pacman dependencies'
        run: pacman -Syu --noconfirm git bash yasm python python-pip scons gcc diffutils make wget unzip tar mingw-w64 ffmpeg aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc nasm cmake pkgconf fakeroot debugedit sudo go which

      - name: 'Creating fake user install yay'
        working-directory: /tmp
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: /usr/bin/pacman" > /etc/sudoers.d/builder
          chmod 0440 /etc/sudoers.d/builder

          PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> /home/builder/.bash_profile
          chown builder:builder /home/builder/.bash_profile

          echo 'Installing yay AUR helper...'
          su -l builder -c "
            export PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:\$PATH\"
            git clone --depth 1 https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si --noconfirm --needed
          "
          echo 'yay installation complete.'

      - name: 'Install MinGW AUR packages as builder using yay'
        run: |
          su -l builder -c "
            export PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:\$PATH\"
            echo 'Installing mingw-w64 AUR packages with yay...'
            yay -S --noconfirm --needed \
              mingw-w64-pkg-config \
              mingw-w64-environment \
              mingw-w64-l-smash \
              mingw-w64-x264
            # If you re-add these, uncomment them:
            # mingw-w64-cmake \
            # mingw-w64-x265
            echo 'AUR package installation complete.'
          "

      - name: 'Checkout submodules'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 'Cache Godot'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/godot
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}

      - name: 'Prepare Godot'
        run: |
          if [ ! -f Godot_v${{ env.GODOT_VERSION }}-stable.x86_64 ]; then
            echo "Downloading Godot editor ..."
            wget -q -O godot_linux.zip https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
            unzip -o godot_linux.zip
          else
            echo "Godot editor found in cache."
          fi

          if [ ! -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable ]; then
            echo "Downloading Godot export templates ..."
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            unzip -o godot_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
            mv ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/
            rm -rf ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable/templates
          else
            echo "Godot export templates found in cache."
          fi

          sed -i 's|^config/version\s*=.*|config/version="${{ inputs.version }}"|' src/project.godot

        # This step is needed so Godot can identify the classes.
      - name: 'Compiling GDE GoZen Debug (Linux)'
        working-directory: ./libs
        run: |
          python -c 'import sys; sys.path.append("."); import build; build.compile_ffmpeg_linux("x86_64")'
          python -c 'import sys; sys.path.append("."); import build; build.copy_lib_files_linux("x86_64")'
          scons -j$(nproc) target=template_debug platform=linux arch=x86_64

      - name: 'Clean ffmpeg'
        working-directory: ./libs/ffmpeg
        run: |
          if [ -f ffmpeg/ffbuild/config.mak ]; then
            make distclean
          fi

      - name: 'Compiling GDE GoZen'
        working-directory: ./libs
        run: |
          python -c 'import sys; sys.path.append("."); import build; build.compile_ffmpeg_windows("x86_64")'
          python -c 'import sys; sys.path.append("."); import build; build.copy_lib_files_windows("x86_64")'
          scons -j$(nproc) target=template_release platform=windows arch=x86_64

      - name: 'Prepare folder'
        run: |
          mkdir -p ${{ env.EXPORT_FOLDER }}
          cp LICENSE ${{ env.EXPORT_FOLDER }}/LICENSE
          cp MANUAL.md ${{ env.EXPORT_FOLDER }}/MANUAL.md
    
      - name: 'Export for Windows'
        working-directory: ./src
        run: |
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --import godot.project --headless --export-release Windows_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.exe
          ../Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 --headless --export-release Windows_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.exe

      - name: 'Copy extra libs'
        run: |
          cp libs/bin/windows_x86_64/*.dll ${{ env.EXPORT_FOLDER }}

      - name: 'Upload Windows'
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Windows_x86_64_${{ inputs.version }}
          path: ${{ env.EXPORT_FOLDER }}
          retention-days: 2

