#!/usr/bin/env python
import os
import sys
import platform as os_platform


LIBS_COMMON = ['avcodec', 'avformat', 'avutil', 'swresample', 'swscale']
MARCH_FLAGS = {
    'x86_64': 'x86-64',
    'arm64': 'native'  # Using 'native' for ARM64 is often safer than specifying specific architecture
}


cache_folder = ARGUMENTS.get('cache_dir', 'null')
if cache_folder != 'null':
    CacheDir(cache_folder)

env = SConscript('godot_cpp/SConstruct')
env.Append(CPPPATH=['gde_gozen'])
env_suffix = env['suffix']
env_shlibsuffix = env['SHLIBSUFFIX']

jobs = ARGUMENTS.get('jobs', 4)
platform = ARGUMENTS.get('platform', 'linux')
arch = ARGUMENTS.get('arch', 'x86_64')
target = ARGUMENTS.get('target', 'template_debug').split('_')[-1]
libpath = f'bin/{platform}_{arch}'

use_system = ARGUMENTS.get('use_system', 'no')


if 'linux' in platform:
    libpath += f'/libgozen{env_suffix}{env_shlibsuffix}'
    if use_system == 'yes':
        env.Append(
            CPPPATH=['/usr/include/ffmpeg/'],
            LIBS=LIBS_COMMON,
        )
    else:
        env.Append(
            LINKFLAGS=[
                '-static-libstdc++',
                '-Wl,-rpath,"$ORIGIN"'],
            CPPFLAGS=[
                '-Iffmpeg/bin_linux',
                '-Iffmpeg/bin_linux/include'],
            LIBPATH=[
                'ffmpeg/bin_linux/include/libavcodec',
                'ffmpeg/bin_linux/include/libavformat',
                'ffmpeg/bin_linux/include/libavutil',
                'ffmpeg/bin_linux/include/libswresample',
                'ffmpeg/bin_linux/include/libswscale',
                'ffmpeg/bin_linux/lib'],
            CCFLAGS=[f'-march={MARCH_FLAGS[arch]}'],
            LIBS=LIBS_COMMON,
        )
elif 'windows' in platform:
    libpath += f'/libgozen{env_suffix}{env_shlibsuffix}'
    if os_platform.system().lower() == 'windows':
        env.Append(LIBS=[
            'avcodec.lib',
            'avformat.lib',
            'avutil.lib',
            'swresample.lib',
            'swscale.lib'
        ])
    else:
        env.Append(LIBS=LIBS_COMMON)

    env.Append(
        CPPPATH=['ffmpeg/bin_windows/include'],
        LIBPATH=['ffmpeg/bin_windows/bin'],
    )


src = Glob('gde_gozen/*.cpp')
sharedlib = env.SharedLibrary(libpath, src)
Default(sharedlib)
